[[Property:title|Appendix: Writing Documentation Filters with EFF, the Eiffel Filter Format]]
[[Property:weight|6]]
[[Property:uuid|0d17d433-3d4f-9575-49f7-d97eccb1a5b1]]
This appendix provides reference information, not needed in simple uses of EiffelStudio.

We saw in the [[PRODUCING AND EXPORTING DOCUMENTATION|section on documentation]]  that you can output documentation about your system in many different formats. A number of predefined formats are available, from Postscript to Microsoft's Rich Text Format, FrameMaker, HTML with and without style sheets, TEX and others. There's nothing special about these formats: they just make their conventions known to EiffelStudio through a '''filter''' expressed in a simple notation called EFF, or Eiffel Filter Format. If you have a favorite format that you'd like EiffelStudio to use for producing documentation, you can define your own filter in EFF. Applications include: 
* Producing a variant of an existing format, to support some "house style" that you have defined, such as a different formatting or fonts.
* Producing documentation for a text processing tool that's not among those supported by default.
* Producing documentation that purposely omit some parts of Eiffel texts, in line with the ideas applied by the Contract and Flat Contract forms.

This appendix describes EFF and its conventions, enabling you to write filters. Note that in practice the best way to write an EFF filter is usually not from scratch, but by copying an existing filter -- one that seems closest to your needs -- and adapting the copy.
<div> 
==Where to put filters==

When you choose to generate documentation, EiffelStudio will ask you to select a filter from a list it obtains by looking up the files of extension <span>.</span> <code>fil</code> in the directory 
<code>$ISE_EIFFEL/studio/filters</code>

To make a new filter available to yourself and other users of this installation, just add the corresponding file <code>name</code> <span>.</span> <code>fil</code> to this directory. Make sure to choose the appropriate <code>name</code>, since this is what the menu of available filters will display. 
</div><div> 
==Filter basics==

An EFF filter follows a very simple structure. As with all other Eiffel-related notations (such as Eiffel itself and Lace, the control language for Eiffel systems), any line or part of a line beginning with two consecutive dashes <code>--</code> is a comment, except if it immediately follows a percent sign since, as will be seen below, <code>- %-</code> is used to denote an Eiffel comment in the class text. Blank lines are also permitted. Comments and blank lines carry no semantic value. 

Except for comments and blank lines, a filter is a sequence of entries, all of the form
<code>Construct | Replacement</code>

where: <code>Construct</code> is one of a set of possible strings, most of which correspond to Eiffel constructs such as <code>Class_declaration</code> or Eiffel keywords such as <code>class</code> ; and <code>Replacement</code> is a string indicating how to format specimens of the <code>Construct</code> that appear in a class text. 

For readability, there may be any number of blanks or tabs between the <code>Construct</code> and the vertical bar <code>|</code>, so that you can align all the bars if you wish. On the right of the bar, however, all characters including blanks and tabs are significant, since they are part of the replacement for the <code>Construct</code>. 
</div><div> 
==The asterisk==

In the <code>Replacement</code> part, you may use the symbol <code>*</code> (asterisk) to denote the construct specimen itself. So for example the entry 
<code>Feature_clause | %N%N*%N%N</code>

specifies the following formatting for any <code>Feature_clause</code>: two successive blank lines (expressed as <code>%N</code>, New Line, a convention taken from Eiffel); the feature clause itself; two blank lines. 

Similarly, in an HTML format, the entry
<code>External |<B> * </B></code>

means that the Eiffel keyword <code>external</code> must appear in the filtered form immediately preceded by <code><B></code>, the HTML code for switching to boldface, and immediately followed by <code></B></code>, the code for reverting to the previous setup. Here you can also write the right-hand side without the asterisks, as <code><B>external</B></code>. If, however, all keywords are to use boldface, it is preferable to write a single entry 
<code>Keyword |<B> * </B></code>

which, thanks to the asterisk, will govern all construct specimens of the <code>Keyword</code> category. You can still override this specification for an individual keyword by including a specific entry for it. 
</div><div> 
==Constructs==

The following general syntactic constructs may appear as the left-hand side, <code>Construct</code>, of an entry: 
<code>
Class_declaration
Class_end
Class_header
Class_name
Comment
Creators
Escape
Feature_clause
Feature_declaration
Features
Formal_generics
Indexing_clause
Inheritance
Invariant_clause
Keyword
New_line
Obsolete_clause
Suffix
Symbol
Tab
</code>

Most of these denote Eiffel constructs as they appear in the official language reference, the book <span> [[Eiffel: The Language]] </span>. Since the Eiffel construct names <code>Feature</code>, <code>Invariant</code> and <code>Obsolete</code> are also keywords and EFF, like Eiffel, is case-insensitive, the EFF construct names use the suffix <code>_clause</code>, for example <code>Feature_clause</code>. 

The constructs corresponding to syntactic constructs are self-explanatory. The others are:
*  <code>Class_end</code>, denoting the final end of a class text. 
*  <code>Keyword</code>, denoting any Eiffel keyword among those listed in boldface in the corresponding appendix in <span> [[Eiffel: The Language]] </span> 
*  <code>New_line</code>, denoting any passage to a new line in the class text. 
*  <code>Suffix</code>, used to introduce the file extension for the generated documentation files. If you don't specify this, EiffelStudio will use the filter's name as extension. 
*  <code>Symbol</code>, denoting any of the Eiffel symbols listed in the corresponding appendix of <span> [[Eiffel: The Language]] </span>. 
*  <code>Escape</code>, to protect special characters of the external tool, as explained below. 
*  <code>Tab</code>, denoting any tab character appearing in the class text. 
<div> 
==Keywords==

A <code>Construct</code> part may consist of the name of an Eiffel keyword. To see the complete list of possible keywords, look at the <code>template</code> filter, file <code>format.fil-template</code> in the default filter directory <code>$ISE_EIFFEL/studio/filters</code>, which includes all of them with a single asterisk <code>*</code> as the <code>Replacement</code> part. 

If entries are present for both the <code>Keyword</code> construct and individual keywords, the individual keyword entries will override the general entry for the keywords listed; the general entry will apply to all other keywords. This makes it possible to have both a general convention for keywords and a special convention for some of them. 
</div>
==Symbol==

A <code>Construct</code> part may consist of an Eiffel symbol, such as <code>:=</code>, <code>/=</code> and many others. Again, you may see the complete list by looking at <code>format.fil-template</code>. Note the following conventions: 
*  <code>%</code> <code>*</code> represents an asterisk. For example as a multiplication operator; the <code>%</code> avoids the confusion with the special meaning of the asterisk for EFF. You can find examples of this convention in the EFF filters for troff and gtroff. 
* Similarly, the Eiffel comment symbol appears as <code>- %-</code>, since just writing <code>- -</code> would introduce a comment in the EFF filter itself. 

As with keywords, you may specify a general convention for symbols, defined by an entry for the construct <code>Symbol</code>, and special conventions for certain individual symbols. Specific symbol entries will override the general <code>Symbol</code> convention. 
</div>
==Escape characters==

A text processing system or other external tool may attach a special role to characters that may normally appear in Eiffel texts. For example, the braces <code>{</code> and <code>}</code>, used in Eiffel's Export clauses, have a special meaning for TEX. Including them without precaution in TEX input will cause trouble. Similarly, many text processing formats attach a special meaning to the backslash character <code>\</code> which, although not special for Eiffel, may appear in an Eiffel string. 

In such cases the filter must " <span>escape</span> " the special character, that is to say, protect it by other characters. For example troff and other text processing tools treat two successive backslash characters <code>\\</code> as denoting a single backslash in the text to be output. The first backslash is the escape character, protecting the second one. 

The <code>Escape</code> construct addresses such cases. The first character that follows <code>Escape</code> (after one or more blanks or tabs) is the character to be escaped. The string after the vertical bar is the replacement for that character. 

Here for example is an escape entry for the backslash in tools that need to escape it through another backslash:

==Special characters and strings==

EFF uses Eiffel-like conventions, based on the percent sign, for control characters appearing in <span>Replacement</span> parts of entries. Two of these conventions have just been noted: <code>%</code> <code>*</code> to represent an asterisk and <code>%-</code> to represent a dash that does not introduce an Eiffel comment. In addition: 
*  <code>%|</code> denotes a vertical bar. (This is necessary since EFF uses <code>|</code> by itself in each entry to separate the <span>Construct</span> from the corresponding <span>Replacement</span>.) 
*  <code>%N</code> (recommended form) or <code>%n</code> denotes a new line. 
*  <code>%T</code> (recommended form) or <code>%t</code> denotes a tab. 
*  <code>%%</code> denotes a percent sign. 
*  <code>%</code> (percent followed by a space) denotes a space. This is equivalent to just a space, but more visible. 

If <code>c</code> is not one of the characters for which special conventions have been listed, <code>%</code> <code>c</code> denotes the character <code>c</code> itself. 

A multi-line entry uses the Eiffel convention for string continuations: <code>%</code> at the end of a line to signal that there is a continuation; a continuation line begins with zero or more spaces and tabs followed by a <code>%</code> ; the characters after the <code>%</code> are the continuation of the string. 

