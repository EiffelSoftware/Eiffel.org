[[Property:title|SCOOP implementation]]
[[Property:weight|9]]
[[Property:uuid|eeb07907-e036-f3d6-5297-a7c44cfd1900]]
The implementation of SCOOP within EiffelStudio varies from the definition as it has been presented in publications during the model's evolution. 

Some of the differences stem from the reality that SCOOP systems could be optimized for performance, including maximizing concurrency. For example, even though the SCOOP rules state that a separate call to a query is synchronous, i. e., the calling processor waits until the query completes before proceeding, if a static analysis can show that the wait is not necessary to the proper functioning of the remainder of the calling routine, then the call to the query can be done asynchronously. 

In other ways, particularly for early versions, the EiffelStudio implementation may not cover all the goals of SCOOP as stated in the various publications. Certain elements that are defined in the SCOOP descriptions may not yet be present, or only partially implemented in the EiffelStudio implementation.  

The differences between the EiffelStudio implementation of SCOOP and current and previous definitions of the SCOOP model are shown below.


=Known limitations=


==Supported concurrency mechanisms==

Although the SCOOP model can support virtually any underlying concurrency mechanism, the initial SCOOP implementation in EiffelStudio version 6.8 supports only one executable, using multiple process threads as SCOOP [[Concurrent programming with SCOOP#Processors|processors]].


==Maximum number of SCOOP processors==

In the initial release, the allowable maximum number of SCOOP processors per system is 1024.


==Separate anchored types==

Applicable prior to revision number 86657: 

Separate status for anchored types is not supported properly. So declarations of the form:

<code>
            my_entity: separate like my_query
</code>
 
and

<code>
            my_entity: separate like Current
</code>

should be used only if you are using revision 86657 or later. 

Also, if you use an anchored declaration such as:

<code>
            my_entity: like my_query
</code>

and the type of <code>my_query</code> is <code>separate</code>, you should make sure you are using revision 86657 or later.


==Agents targeted to objects of separate types==

In version 6.8, agents targeted on separate objects are not supported.


=Workarounds=

The first implementation of SCOOP, some things that we do commonly in sequential Eiffel become less fluid in the presence of SCOOP. Although not strictly limitations in the implementation of SCOOP principles, in order to make SCOOP programming easier, these are areas that should be improved in future releases. In the meantime, there are workarounds for some of these situations.


==Printing a separate STRING ==

Suppose you have declared a class attribute of type <code>separate STRING</code>:

<code>
    my_separate_string: separate STRING = "Hello Eiffel World!"
</code>

and you want to output that string using <code>io.put_string</code>. The solution you might use from sequential Eiffel would be:

<code>
            io.put_string (my_separate_string)
</code>

But the statement above results in a compile error because the argument type (<code>separate STRING</code>) is not compatible with the type (<code>STRING</code>) that <code>put_string</code> is expecting.

In order to make printing of the content of separate instances of <code>STRING</code>, a creation procedure, <code>make_from_separate</code>, is available in the string classes which allows initialization of a non-separate instance of <code>STRING</code> from a separate <code>STRING</code>.  

So, to print <code>my_separate_string</code>, you could create a non-separate instance of <code>STRING</code>, then print the non-separate instance, as shown below.

<code>
    local
        l_temp: STRING
                ...
            create l_temp.make_from_separate (my_separate_string)
            io.put_string (l_temp)
</code>

Or use a creation expression and avoid declaring the local variable:

<code>
            io.put_string (create {STRING}.make_from_separate (my_separate_string))
</code>

== Calling a separate agent ==

Calling a separate agent is a bit tricky, especially if it's a <code>PROCEDURE</code> which should be executed asynchronously.
If the agent does not take any arguments, you must pass Void, otherwise the compiler will generate an empty <code>TUPLE</code> which
is on the same processor as the caller and thus triggers lock passing (see [[Asynchronous Calls]]):

<code>
do_call (proc: separate PROCEDURE [ANY, TUPLE])
	do
		proc.call (Void)	
	end
</code>

If the agent does take arguments, things get a bit more tricky. If the call must be asynchronous, you have to do a workaround with the feature <code>{ROUTINE}.empty_operands</code> like this:

<code>
do_call (a_procedure: separate PROCEDURE [ANY, TUPLE[separate STRING]]; a_string: separate STRING)
	local
		l_tuple: separate TUPLE [separate STRING]
	do
		l_tuple := a_procedure.empty_operands
		set_tuple_string (l_tuple, a_string)
		a_procedure.call (l_tuple)
	end

set_tuple_string (a_tuple: separate TUPLE [str: separate STRING]; a_string: separate STRING)
	do
		a_tuple.str := a_string
	end
</code>


=Implementation dependent behavior=


==The Wait Rule==

{{note | This only applies to EiffelStudio releases prior to 15.01}}

The [[Concurrent programming with SCOOP#Access to shared resources|Wait Rule]] says: ''A routine call with separate arguments will execute when all corresponding processors are available and hold them exclusively for the duration of the routine.''

In the EiffelStudio implementation prior to 15.01, a routine will not necessarily wait for all processors associated with its separate arguments to be available before it ''begins'' execution. The waiting on processors occurs in a "lazy" manner. Execution will only wait on the availability of one of the processors when it actually needs to use the argument associated with that processor. This means that if there are several instructions ahead of the first instruction that references a separate argument, then those several instructions will be executed immediately. Only at the point at which the separate argument's processor is needed will the routine pause and wait for the availability of the processor.

